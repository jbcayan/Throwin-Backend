# Generated by Django 5.1.2 on 2025-02-02 06:01

import django.db.models.deletion
import django.db.models.expressions
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('store', '0004_store_exposure_store_gacha_enabled_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GachaHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('deleted', 'Deleted'), ('pending', 'Pending')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('gacha_kind', models.CharField(choices=[('gold', 'Gold'), ('silver', 'Silver'), ('bronze', 'Bronze')], help_text='Gacha kind (gold, silver, bronze)', max_length=10)),
                ('is_consumed', models.BooleanField(default=False, help_text='Whether the gacha was consumed')),
                ('consumed_at', models.DateTimeField(blank=True, help_text='The date and time when the gacha was consumed', null=True)),
                ('consumer', models.ForeignKey(help_text='The consumer who played the gacha', on_delete=django.db.models.deletion.CASCADE, related_name='gacha_histories', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created Person')),
                ('store', models.ForeignKey(help_text='The store where the gacha is available', on_delete=django.db.models.deletion.CASCADE, related_name='gacha_store_histories', to='store.store')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpinBalance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('deleted', 'Deleted'), ('pending', 'Pending')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('total_spend', models.DecimalField(decimal_places=2, default=0, help_text='Total throwin amount per store', max_digits=10)),
                ('used_spend', models.DecimalField(decimal_places=2, default=0, help_text='Total used throwin amount per store', max_digits=10)),
                ('remaining_spend', models.GeneratedField(db_persist=True, expression=django.db.models.expressions.CombinedExpression(models.F('total_spend'), '-', models.F('used_spend')), help_text='Remaining throwin amount per store', output_field=models.DecimalField(decimal_places=2, max_digits=10))),
                ('total_spin', models.PositiveIntegerField(default=0, help_text='Total spin per store')),
                ('used_spin', models.PositiveIntegerField(default=0, help_text='Total used spin per store')),
                ('remaining_spin', models.GeneratedField(db_persist=True, expression=django.db.models.expressions.CombinedExpression(models.F('total_spin'), '-', models.F('used_spin')), help_text='Remaining spin per store', output_field=models.PositiveIntegerField())),
                ('consumer', models.ForeignKey(help_text='The consumer who has the spins', on_delete=django.db.models.deletion.CASCADE, related_name='spin_balances', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL, verbose_name='Created Person')),
                ('restaurant', models.ForeignKey(help_text='The restaurant where the spins are available', on_delete=django.db.models.deletion.CASCADE, related_name='spin_balances', to='store.restaurant')),
                ('store', models.ForeignKey(help_text='The store where the spins are available', on_delete=django.db.models.deletion.CASCADE, related_name='spin_balances', to='store.store')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_by', to=settings.AUTH_USER_MODEL, verbose_name='Updated Person')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
