from django.db import models
from django.contrib.auth import get_user_model
import uuid
import os
import requests
from urllib.parse import parse_qs
from dotenv import load_dotenv

from accounts.models import User  # Importing User for reference
from accounts.choices import UserKind  # Importing role choices
from store.models import Store  # âœ… Corrected Import

# Load environment variables from the .env file
load_dotenv()

User = get_user_model()

class GMOCreditPayment(models.Model):
    STATUS_CHOICES = [
        ("PENDING", "Pending"),
        ("CAPTURE", "Captured"),
        ("FAILED", "Failed"),
        ("CANCELED", "Canceled"),
    ]

    order_id = models.CharField(
        max_length=50, unique=True, db_index=True,
        help_text="Unique identifier for the payment transaction"
    )
    customer = models.ForeignKey(
        User, on_delete=models.SET_NULL, null=True, blank=True,
        related_name="gmo_payments",
        help_text="Authenticated customer (nullable for anonymous users)"
    )
    nickname = models.CharField(
        max_length=100, blank=True, null=True,
        help_text="Nickname for the payer (optional for unauthenticated users)"
    )

    # UUIDs for entity relationships
    staff_uid = models.UUIDField(
        default=uuid.uuid4, editable=False, db_index=True,
        help_text="Unique identifier for staff receiving the tip"
    )
    store_uid = models.UUIDField(
        default=uuid.uuid4, blank=True, null=True, db_index=True,
        help_text="Unique identifier for store (optional)"
    )

    amount = models.DecimalField(
        max_digits=10, decimal_places=2,
        help_text="Payment amount"
    )
    currency = models.CharField(
        max_length=10, default="JPY",
        help_text="Currency of the payment"
    )

    status = models.CharField(
        max_length=20, choices=STATUS_CHOICES, default="PENDING",
        help_text="Status of the payment"
    )
    transaction_id = models.CharField(
        max_length=100, blank=True, null=True,
        help_text="Transaction ID generated by GMO"
    )
    approval_code = models.CharField(
        max_length=50, blank=True, null=True,
        help_text="Approval code from GMO"
    )
    process_date = models.DateTimeField(blank=True, null=True)

    access_id = models.CharField(max_length=100, blank=True, null=True)
    access_pass = models.CharField(max_length=100, blank=True, null=True)
    token = models.CharField(max_length=512, blank=True, null=True)

    card_last4 = models.CharField(
        max_length=4, blank=True, null=True,
        help_text="Last 4 digits of the credit card"
    )
    expire_date = models.CharField(
        max_length=5, blank=True, null=True,
        help_text="Credit card expiry date (MMYY)"
    )

    forward = models.CharField(max_length=100, blank=True, null=True)
    pay_method = models.CharField(max_length=50, blank=True, null=True)

    is_processed = models.BooleanField(
        default=False, help_text="Indicates if the payment has been processed"
    )

    created_at = models.DateTimeField(auto_now_add=True, db_index=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Order {self.order_id} - {self.status}"

    class Meta:
        ordering = ["-created_at"]

    # ---------------------
    # Dynamic Relationship Properties
    # ---------------------

    @property
    def restaurant(self):
        """
        Dynamically fetch the restaurant based on the store.
        """
        try:
            store = Store.objects.get(uid=self.store_uid)
            return store.restaurant if store else None
        except Store.DoesNotExist:
            return None

    @property
    def sales_agent(self):
        """
        Dynamically fetch the sales agent based on the restaurant.
        """
        restaurant = self.restaurant
        return restaurant.sales_agent if restaurant else None

    # ---------------------
    # Payment Status Check Helper
    # ---------------------

    def check_payment_status(self):
        """
        Checks the payment status with the GMO API.
        If the status returned is 'CAPTURE', update the model accordingly.
        """
        # Retrieve credentials and base URL from environment variables
        shop_id = os.environ.get("GMO_SHOP_ID")
        shop_pass = os.environ.get("GMO_SHOP_PASS")
        base_url = os.environ.get("GMO_API_URL")
        
        # Construct the endpoint URL for searching the trade
        url = f"{base_url}/payment/SearchTrade.idPass"
        
        # Prepare payload with credentials and order id
        payload = {
            "ShopID": shop_id,
            "ShopPass": shop_pass,
            "OrderID": self.order_id
        }
        
        response = requests.post(url, data=payload)
        
        if response.status_code == 200:
            # Parse the URL-encoded response text
            parsed_response = parse_qs(response.text)
            
            # Get the status value (first element from list)
            status_value = parsed_response.get("Status", [None])[0]
            if status_value == "CAPTURE":
                self.status = "CAPTURE"
                self.save(update_fields=["status"])
            return parsed_response
        else:
            # Handle error as needed (consider logging instead of printing)
            return None
