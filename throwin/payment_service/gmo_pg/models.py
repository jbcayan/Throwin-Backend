from django.db import models
from django.contrib.auth import get_user_model
import uuid

User = get_user_model()

class GMOCreditPayment(models.Model):
    STATUS_CHOICES = [
        ("PENDING", "Pending"),
        ("CAPTURE", "Captured"),
        ("FAILED", "Failed"),
        ("CANCELED", "Canceled"),
    ]

    order_id = models.CharField(
        max_length=50, unique=True, db_index=True,
        help_text="Unique identifier for the payment transaction"
    )
    customer = models.ForeignKey(
        User, on_delete=models.SET_NULL, null=True, blank=True,
        related_name="gmo_payments",
        help_text="Authenticated customer (nullable for anonymous users)"
    )
    nickname = models.CharField(
        max_length=100, blank=True, null=True,
        help_text="Nickname for the payer (optional for unauthenticated users)"
    )

    # UUIDs for entity relationships
    staff_uid = models.UUIDField(
        default=uuid.uuid4, editable=False, db_index=True,
        help_text="Unique identifier for staff receiving the tip"
    )
    restaurant_uid = models.UUIDField(
        default=uuid.uuid4, editable=False, db_index=True,
        help_text="Unique identifier for restaurant"
    )
    store_uid = models.UUIDField(
        default=uuid.uuid4, blank=True, null=True, db_index=True,
        help_text="Unique identifier for store (optional)"
    )
    sales_agent_uid = models.UUIDField(
        default=uuid.uuid4, blank=True, null=True, db_index=True,
        help_text="Unique identifier for sales agent (optional)"
    )

    amount = models.DecimalField(
        max_digits=10, decimal_places=2,
        help_text="Payment amount"
    )
    currency = models.CharField(
        max_length=10, default="JPY",
        help_text="Currency of the payment"
    )

    status = models.CharField(
        max_length=20, choices=STATUS_CHOICES, default="PENDING",
        help_text="Status of the payment"
    )
    transaction_id = models.CharField(
        max_length=100, blank=True, null=True,
        help_text="Transaction ID generated by GMO"
    )
    approval_code = models.CharField(
        max_length=50, blank=True, null=True,
        help_text="Approval code from GMO"
    )
    process_date = models.DateTimeField(blank=True, null=True)

    access_id = models.CharField(max_length=100, blank=True, null=True)
    access_pass = models.CharField(max_length=100, blank=True, null=True)
    token = models.CharField(max_length=512, blank=True, null=True)

    card_last4 = models.CharField(
        max_length=4, blank=True, null=True,
        help_text="Last 4 digits of the credit card"
    )
    expire_date = models.CharField(
        max_length=5, blank=True, null=True,
        help_text="Credit card expiry date (MMYY)"
    )

    forward = models.CharField(max_length=100, blank=True, null=True)
    pay_method = models.CharField(max_length=50, blank=True, null=True)

    is_processed = models.BooleanField(
        default=False, help_text="Indicates if the payment has been processed"
    )

    created_at = models.DateTimeField(auto_now_add=True, db_index=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Order {self.order_id} - {self.status}"

    class Meta:
        ordering = ["-created_at"]
